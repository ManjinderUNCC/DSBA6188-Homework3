# -*- coding: utf-8 -*-
"""Homework3-DSBA6188-semantic_search_wikipedia_qa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10FDUV8Z63YR4UCR-qltukBJQ7eXUQkTD

# Semantic Search - Wikipedia Question-Answer-Retrieval

This examples demonstrates the setup for Question-Answer-Retrieval.

You can input a query or a question. The script then uses semantic search
to find relevant passages in Simple English Wikipedia (as it is smaller and fits better in RAM).

As model, we use: nq-distilbert-base-v1

It was trained on the Natural Questions dataset, a dataset with real questions from Google Search together with annotated data from Wikipedia providing the answer. For the passages, we encode the Wikipedia article tile together with the individual text passages.
"""

!pip install -U sentence-transformers datasets

!pip install datasets

import json
from sentence_transformers import SentenceTransformer, util
import time
import os
import torch
import gzip
from datasets import load_dataset

ds = load_dataset("Coder-Dragon/wikipedia-movies", split='train[:1000]')

if not torch.cuda.is_available():
  print("Warning: No GPU found. Please add GPU to your notebook")

# We use the Bi-Encoder to encode all passages, so that we can use it with semantic search
model_name = 'nq-distilbert-base-v1'
bi_encoder = SentenceTransformer(model_name)
top_k = 5  # Increase the number of retrieved passages for better coverage

passages = []
for movie in ds:
  passages.append([movie["Title"], movie["Plot"]])

print("Passages:", len(passages))

corpus_embeddings = bi_encoder.encode(passages, convert_to_tensor=True, show_progress_bar=True)

def search(query):
    # Encode the query using the bi-encoder and find potentially relevant passages
    start_time = time.time()
    question_embedding = bi_encoder.encode(query, convert_to_tensor=True)
    hits = util.semantic_search(question_embedding, corpus_embeddings, top_k=top_k)
    hits = hits[0]  # Get the hits for the first query
    end_time = time.time()

    print("Input question:", query)
    print("Results (after {:.3f} seconds):".format(end_time - start_time))
    for hit in hits:
      print("\t{:.3f}\t{}".format(hit['score'],passages[hit['corpus_id']]))

search(query="Documentaries showcasing indigenous peoples' survival and daily life in Arctic regions")

search(query="Western romance")

search(query = "Silent film about a Parisian star moving to Egypt, leaving her husband for a baron, and later reconciling after finding her family in poverty in Cairo.")

search(query = "Comedy film, office disguises, boss's daughter, elopement.")

search(query = "Lost film, Cleopatra charms Caesar, plots world rule, treasures from mummy, revels with Antony, tragic end with serpent in Alexandria.")

search(query = "Denis Gage Deane-Tanner")